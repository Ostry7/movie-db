{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","url","this","props","movie","id","window","location","href","react_default","a","createElement","key","alt","src","poster_src","class","title","className","overview","type","onClick","viewMovie","bind","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","performSearch","searchTitle","_this2","console","log","urlString","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","movieRow","src_MovieRow","push","setState","rows","error","xhr","status","err","e","target","width","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAyBeA,6LArBX,IAAMC,EAAK,oCAAsCC,KAAKC,MAAMC,MAAMC,GAClEC,OAAOC,SAASC,KAAOP,mCAGnB,OAAQQ,EAAAC,EAAAC,cAAA,SAAON,GAAG,aAAaO,IAAKV,KAAKC,MAAMC,MAAMC,IAClDI,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKN,GAAG,WAAWQ,IAAI,SAASC,IAAKZ,KAAKC,MAAMC,MAAMW,cAE5DN,EAAAC,EAAAC,cAAA,MAAIK,MAAM,cACRP,EAAAC,EAAAC,cAAA,UAAKT,KAAKC,MAAMC,MAAMa,OACnBR,EAAAC,EAAAC,cAAA,KAAGO,UAAU,YAAYb,GAAG,YAAYH,KAAKC,MAAMC,MAAMe,UACzDV,EAAAC,EAAAC,cAAA,SAAON,GAAG,WAAWe,KAAK,SAASC,QAASnB,KAAKoB,UAAUC,KAAKrB,MAAOsB,MAAM,0BAftEC,IAAMC,4BCmFdC,cA/Eb,SAAAA,EAAYxB,GAAM,IAAAyB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3B,KAAAyB,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA3B,KAAA2B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA/B,KAAMC,KACD+B,MAAO,GAgBZN,EAAKO,cAAc,KAlBHP,6EAqBFQ,GAAa,IAAAC,EAAAnC,KACzBoC,QAAQC,IAAI,kBACZ,IAAMC,EAAY,4FAA8FJ,EAChHK,IAAEC,KAAK,CACLzC,IAAIuC,EACJG,QAAS,SAACC,GACRN,QAAQC,IAAI,qBACZD,QAAQC,IAAIK,GACZ,IAAMC,EAAUD,EAAcC,QAEzBC,EAAW,GACfD,EAAQE,QAAQ,SAAC3C,GAChBA,EAAMW,WAAa,kCAAoCX,EAAM4C,YAE7D,IAAMC,EAAWxC,EAAAC,EAAAC,cAACuC,EAAD,CAAUtC,IAAKR,EAAMC,GAAID,MAAOA,IACjD0C,EAAUK,KAAKF,KAGjBZ,EAAKe,SAAS,CAACC,KAAMP,KAEvBQ,MAAO,SAACC,EAAKC,EAAQC,GACnBnB,QAAQgB,MAAM,uEAKAI,GAClBpB,QAAQC,IAAImB,EAAEC,OAAOnC,OACrB,IACMY,EAAcsB,EAAEC,OAAOnC,MADTtB,KAERiC,cAAcC,oCAG9B,OACE3B,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OAEbT,EAAAC,EAAAC,cAAA,SAAOO,UAAU,YACfT,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,WAAW+C,MAAM,KAAK9C,IAAI,kBAErCL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,iCAOVF,EAAAC,EAAAC,cAAA,SAAON,GAAG,QAAQwD,SAAU3D,KAAK4D,oBAAoBvC,KAAKrB,MAAO6D,YAAY,oBAE1E7D,KAAKgC,MAAMmB,aA1EA3B,aCOEsC,QACW,cAA7B1D,OAAOC,SAAS0D,UAEe,UAA7B3D,OAAOC,SAAS0D,UAEhB3D,OAAOC,SAAS0D,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5652fcfc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass MovieRow extends React.Component {\r\n  viewMovie(){\r\n    const url =\"https://www.themoviedb.org/movie/\" + this.props.movie.id\r\n    window.location.href = url\r\n  }\r\n    render() {\r\n        return  <table id=\"movietable\" key={this.props.movie.id}>\r\n           <tbody>\r\n             <tr>\r\n               <td>\r\n                 <img id=\"posterek\" alt=\"poster\" src={this.props.movie.poster_src} />\r\n               </td>\r\n           <td class=\"table-data\">\r\n             <h3>{this.props.movie.title}</h3>\r\n                <p className=\"paragraph\" id=\"overview\">{this.props.movie.overview}</p>\r\n                <input id=\"btn-view\" type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View movie\"/>\r\n              </td>\r\n             </tr>\r\n           </tbody>\r\n        </table>\r\n    }\r\n}\r\n\r\nexport default MovieRow","import React, {Component} from 'react';\nimport './App.css';\nimport MovieRow from './MovieRow.js';\nimport $ from 'jquery';\n\nclass App extends Component { \n  constructor(props){\n    super(props)\n    this.state ={}\n\n    // const movies = [\n    //   {id: 0, poster_src:\"https://pisces.bbystatic.com/image2/BestBuy_US/images/products/6260/6260224_so.jpg\", title: \" The Avengers\", overview:\"DESTASASDASDASDADASDADSAS DESCRIPTION\"},\n    //   {id: 1, poster_src:\"https://m.media-amazon.com/images/M/MV5BMjMxNjY2MDU1OV5BMl5BanBnXkFtZTgwNzY1MTUwNTM@._V1_.jpg\", title: \"Avengers Infinity War \", overview:\"DESTASASDASDASDADASDADSAS DESCRIPTION 2\"},\n    // ]\n\n    // var movieRows = []\n    // movies.forEach((movie)=> {\n    //   console.log(movie.title)\n    //   const movieRow = <MovieRow movie={movie} />\n    //   movieRows.push(movieRow)\n    // })\n\n    // this.state={rows:movieRows}\n\n    this.performSearch(\"a\")\n  }\n\n    performSearch(searchTitle) {\n      console.log(\"PERFORM SEARCH\")\n      const urlString = \"https://api.themoviedb.org/3/search/movie?api_key=8268d9138fb7a51533dd90191e196395&query=\" + searchTitle\n      $.ajax({\n        url:urlString,\n        success: (searchResults) => {\n          console.log(\"Mamy dane pobrane\")\n          console.log(searchResults)\n          const results = searchResults.results\n           //console.log(results[0])\n           var movieRows =[]\n           results.forEach((movie) => {\n            movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path\n            // console.log(movie.poster_path)\n            const movieRow = <MovieRow key={movie.id} movie={movie}/>\n            movieRows.push(movieRow)\n          })\n  \n          this.setState({rows: movieRows})\n        },\n        error: (xhr, status, err) => {\n          console.error(\"Failed to fetch data\")\n        }\n      })\n    }\n\n    searchChangeHandler(e) {\n      console.log(e.target.value)\n      const boundObject = this\n      const searchTitle = e.target.value\n      boundObject.performSearch(searchTitle)\n    }\n  render() {\n  return (\n    <div className=\"App\">\n\n      <table className=\"titleBar\">\n        <tbodby>\n          <tr>\n            <td>\n              <img alt=\"app icon\" width=\"60\" src=\"pobrane1.png\"/>\n            </td>\n            <td>\n              <h1>Movies Searcher</h1>\n            </td>\n          </tr>\n        </tbodby>\n      </table>\n\n\n    <input id=\"input\" onChange={this.searchChangeHandler.bind(this)} placeholder=\"Enter the title\"/>\n\n      {this.state.rows}\n\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}